Steps before a release is done
------------------------------

Check all is crispy

  ./setup.py clean build
  ./setup.py clean sdist


Edit the ``fades/_version.py`` file properly, then tag and commit/push

  git tag release-VERSION
  git commit -am "Release VERSION"
  git push --tag


How to release it to PyPI
-------------------------

Dead simple:

    ./setup.py sdist upload


How to create a .deb
--------------------

Create the tarball:

  ./setup.py clean sdist


Copy this tarball to a clean dir, renaming as "orig"

  mkdir /tmp/fades_pack
  cp dist/fades-X.Y.tar.gz /tmp/fades_pack/fades_X.Y.orig.tar.gz
  cd /tmp/fades_pack


Most of next instructions come from http://wiki.debian.org/Python/GitPackaging

  tar -xf fades_X.Y.orig.tar.gz
  cd fades-X.Y
  git init
  git add .
  git commit -m "import fades_X.Y.orig.tar.gz"
  git checkout -b upstream
  pristine-tar commit ../fades_X.Y.orig.tar.gz upstream
  git-dpm init ../fades_X.Y.orig.tar.gz


Copy the project's debian dir and change changelog

  cp -pr $DEVEL/fades/debian .
  dch   # doing the following:
    - version should be   (X.Y-1) unstable
    - just leave one "* Initial release."


Continue with preparations:

  git add debian/*
  git commit -m "Added debian dir."
  git-dpm prepare
  git-dpm status


Build the .deb

    debuild -us -uc -I -i


To test the .deb you just created:

    sudo dpkg i *.deb


If you want to uninstall it do:

    sudo dpkg -r fades


How to release it to Arch
-------------------------

    Edit ``pkg/archlinux/PKGBUILD`` and set *pkgver* and *md5sums*, then run *makepkg -S* inside
    the same directory that PKGBUILD. It will generate a file named 'fades-X.X-X.src.tar.gz'.
    Finally submit this file at the AUR page.


How to sign the files
---------------------


